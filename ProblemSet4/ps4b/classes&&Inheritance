#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  9 15:41:13 2021

@author: suspect-0
"""

# class Coordinate(object):
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#     def distance(self, other):
#         x_diff_sq = (self.x-other.x)**2
#         y_diff_sq = (self.y-other.y)**2
#         return (x_diff_sq + y_diff_sq)**0.5
#     def __str__(self):
#         return "<" + str(self.x) + "," + str(self.y) + ">"


# class Coordinate(object):
#     def __init__(self,x,y):
#         self.x = x
#         self.y = y

#     def getX(self):
#         # Getter method for a Coordinate object's x coordinate.
#         # Getter methods are better practice than just accessing an attribute directly
#         return self.x

#     def getY(self):
#         # Getter method for a Coordinate object's y coordinate
#         return self.y

#     def __str__(self):
#         return '<' + str(self.getX()) + ',' + str(self.getY()) + '>'

#     def __eq__(self, other):
#         return self.getX() == other.getX() and self.getY() == other.getY()
    
#     def __repr__(self):
#         return 'Coordinate(' + str(self.getX()) + ', ' + str(self.getY()) + ')'
    
    
    
    
    
# c = Coordinate(1, 4)
# d = Coordinate(3, 4)
# c == d





# class fraction(object):
#     def __init__(self, numer, denom):
#         self.numer = numer
#         self.denom = denom
#     # def __str__(self):
#     #     return str(self.numer) + ' / ' + str(self.denom)
#     def __repr__(self):
#         return str(self.numer) + ' / / ' + str(self.denom)
#     def getNumer(self):
#         return self.numer
#     def getDenom(self):
#         return self.denom
#     def __add__(self, other):
#         numerNew = other.getDenom() * self.getNumer() \
#         + other.getNumer() * self.getDenom()
#         denomNew = other.getDenom() * self.getDenom()
#         return fraction(numerNew, denomNew)
#     def __sub__(self, other):
#         numerNew = other.getDenom() * self.getNumer() \
#         - other.getNumer() * self.getDenom()
#         denomNew = other.getDenom() * self.getDenom()
#         return fraction(numerNew, denomNew)
#     def convert(self):
#         return self.getNumer() / self.getDenom()
    
    
    
# half = fraction(1, 2)
# two_third = fraction(2, 3)



# class intSet(object):
#     def __init__(self):
#         self.vals = []
#     def insert(self, e):
#         if not e in self.vals:
#             self.vals.append(e)
#     def member(self, e):
#         return e in self.vals
#     def remove(self, e):
#         try:
#             self.vals.remove(e)
#         except:
#             raise ValueError(str(e) + ' not found')
#     def __str__(self):
#         self.vals.sort()
#         result = ''
#         for e in self.vals:
#             result = result + str(e) + ','
#         return '{' + result[:-1] + '}'



# class intSet(object):
#     """An intSet is a set of integers
#     The value is represented by a list of ints, self.vals.
#     Each int in the set occurs in self.vals exactly once."""

#     def __init__(self):
#         """Create an empty set of integers"""
#         self.vals = []

#     def insert(self, e):
#         """Assumes e is an integer and inserts e into self""" 
#         if not e in self.vals:
#             self.vals.append(e)

#     def member(self, e):
#         """Assumes e is an integer
#            Returns True if e is in self, and False otherwise"""
#         return e in self.vals

#     def remove(self, e):
#         """Assumes e is an integer and removes e from self
#            Raises ValueError if e is not in self"""
#         try:
#             self.vals.remove(e)
#         except:
#             raise ValueError(str(e) + ' not found')

#     def __str__(self):
#         """Returns a string representation of self"""
#         self.vals.sort()
#         return '{' + ','.join([str(e) for e in self.vals]) + '}'
    
#     def intersect(self, other):
#         '''
#         Returns new intSet of values that are common in both sets
#         '''
#         commonValues = intSet()
#         for value in self.vals:
#             if value in other.vals:
#                 commonValues.insert(value)
                
#         return commonValues
    
#     def __len__(self):
#         return len(self.vals)

# a = intSet()
# a.insert(2)
# a.insert(4)
# a.insert(6)
# a.insert(7)

# b = intSet()
# b.insert(2)
# b.insert(9)
# b.insert(4)
# b.insert(8)

# c = a.intersect(b)


# class Animal(object):
#     def __init__(self, age):
#         self.age = age
#         self.name = None
#     def get_age(self):
#         return self.age
#     def get_name(self):
#         return self.name
#     def set_age(self, newage):
#         self.age = newage
#     def set_name(self, newname=""):
#         self.name = newname
#     def __str__(self):
#         return "animal:"+str(self.name)+":"+str(self.age)



# class Rabbit(Animal):
#     tag = 1
#     def __init__(self, age, parent1=None, parent2=None):
#         Animal.__init__(self, age)
#         self.parent1 = parent1
#         self.parent2 = parent2
#         self.rid = Rabbit.tag
#         Rabbit.tag += 1
#     def get_rid(self):
#         return str(self.rid).zfill(3)
#     def get_parent1(self):
#         return self.parent1
#     def get_parent2(self):
#         return self.parent2
#     def __add__(self, other):
#         # returning object of same type as this class
#         return Rabbit(0, self, other)

#     def __eq__(self, other):
#         parents_same = self.parent1.rid == other.parent1.rid \
#         and self.parent2.rid == other.parent2.rid
#         parents_opposite = self.parent2.rid == other.parent1.rid \
#         and self.parent1.rid == other.parent2.rid
#         return parents_same or parents_opposite


import datetime

class Person(object):
    def __init__(self, name):
        """create a person called name"""
        self.name = name
        self.birthday = None
        self.lastName = name.split(' ')[-1]
    def getLastName(self):
        """return self's last name"""
        return self.lastName
    def __str__(self):
        """return self's name"""
        return self.name
    def setBirthday(self,month,day,year):
        """sets self's birthday to birthDate"""
        self.birthday = datetime.date(year,month,day)
    def getAge(self):
        """returns self's current age in days"""
        if self.birthday == None:
            raise ValueError
        return (datetime.date.today() - self.birthday).days
    
    def __lt__(self, other):
        """return True if self's name is lexicographically
        less than other's name, and False otherwise"""
        if self.lastName == other.lastName:
            return self.name < other.name
        return self.lastName < other.lastName



p1 = Person('Mark Zuckerberg')
p1.setBirthday(5,14,84)
p2 = Person('Drew Houston')
p2.setBirthday(3,4,83)
p3 = Person('Bill Gates')
p3.setBirthday(10,28,55)
p4 = Person('Andrew Gates')
p5 = Person('Steve Wozniak')
personList = [p1, p2, p3, p4, p5]

# for e in personList:
#     print(e)

# print('\n\n')
# personList.sort()

# for e in personList:
#     print(e)



class MITPerson(Person):
    nextIdNum = 0 # next ID number to assign

    def __init__(self, name):
        Person.__init__(self, name) # initialize Person attributes
        # new MITPerson attribute: a unique ID number
        self.idNum = MITPerson.nextIdNum
        MITPerson.nextIdNum += 1

    def getIdNum(self):
        return self.idNum

    # sorting MIT people uses their ID number, not name!
    def __lt__(self, other):
        return self.idNum < other.idNum
        
    def speak(self, utterance):
        return (self.getLastName() + " says: " + utterance)
        

# example usage

m3 = MITPerson('Mark Zuckerberg')
Person.setBirthday(m3,5,14,84)
m2 = MITPerson('Drew Houston')
Person.setBirthday(m2,3,4,83)
m1 = MITPerson('Bill Gates')
Person.setBirthday(m1,10,28,55)



MITPersonList = [m1, m2, m3]

for e in MITPersonList:
    print(e)
    
MITPersonList.sort()

print()

for e in MITPersonList:
    print(e)


p1 =  MITPerson('Eric')
p2 = MITPerson('John')
p3 = MITPerson('John')
p4 = Person('John')

# p1<p2
#p1<p4

#p4<p1

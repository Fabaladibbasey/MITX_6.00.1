#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 18 18:01:20 2021

@author: suspect-0
"""

# def bubble_sort(L):
#     swap = False
#     while not swap:
#         swap = True
#         for J in range(1, len(L)):
#             if L[J - 1] > L[J]:
#                 swap = False
#                 # do the swaping
#                 L[J - 1], L[J] = L[J], L[J - 1]
     
#     return L
        
# def selection_sort(L):
#     suffixSt = 0
#     while suffixSt != len(L):
#         for i in range(suffixSt, len(L)):
#             if L[i] < L[suffixSt]:
#                 print(L[i], L[suffixSt])
#                 L[suffixSt], L[i] = L[i], L[suffixSt]
#                 print(L)
#         suffixSt += 1
    
#     return L


# def selSort(L):
#     for i in range(len(L) - 1):
#         minIndx = i
#         minVal = L[i]
#         j = i+1
#         while j < len(L):
#             if minVal > L[j]:
#                 minIndx = j
#                 minVal = L[j]
#             j += 1
#         if minIndx != i:
#             temp = L[i]
#             L[i] = L[minIndx]
#             L[minIndx] = temp
# And here is a suggested alternative:

# def newSort(L):
#     for i in range(len(L) - 1):
#         j=i+1
#         while j < len(L):
#             if L[i] > L[j]:
#                 temp = L[i]
#                 L[i] = L[j]
#                 L[j] = temp
#             j += 1


def merge_sort(L):
    if len(L) < 2:
        return L[:]
    else:
        middle = len(L)//2
        left = merge_sort(L[:middle])
        right = merge_sort(L[middle:])
        print(left, '    ', right)
    m = merge(left, right)
    print('this is m', m)
    return m

def merge(left, right):
    result = []
    i,j = 0, 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
            
    while (i < len(left)):
        result.append(left[i])
        i += 1
    while (j < len(right)):
        result.append(right[j])
        j += 1
    return result




l1 = [3, 7, 2, 1]
l2 = [4, 8, 2, 9]
l3 = l1 + l2
print(l3)
# print(merge_sort(l1))

print(merge_sort(l3))

















